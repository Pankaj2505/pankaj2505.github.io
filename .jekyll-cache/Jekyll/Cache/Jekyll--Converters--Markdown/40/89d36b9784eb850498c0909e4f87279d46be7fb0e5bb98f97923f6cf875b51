I"%P<p><img src="\img\posts\numpy\cheetSheet.png" alt="cheetSheet" /></p>

<h1 id="here-we-will-learn-topics-like">Here we will learn topics like</h1>
<ol>
  <li>Universal function</li>
  <li>aggreagate function</li>
  <li>Broadcasting</li>
</ol>

<h2 id="universal-function">Universal function</h2>

<ol>
  <li>A big difference between python array and numpy array is execution speed.</li>
  <li>python array iterate through each element and then process it.</li>
  <li>numpy array use the concept of vectorized operation, which mean computing all elements of an array parallely</li>
</ol>

<blockquote>
  <p>we implement computaion in numpy array using universal function,”ufunc”</p>
</blockquote>

<h4 id="why-numpy-function-are-fast">Why numpy function are fast</h4>
<blockquote>
  <p>it is beacuse here we use somthing called broadcasting, in broadcasting , first the code is compiled and then executed.This is the main difference between python and numpy , in python the code is compiled at run time, so this will take some time when we are processing a huge data, while in numpy , the huge data is already compiled during creation , so this will save time during execution</p>
</blockquote>

<h5 id="compare-effectiveness-between-python-array-and-numpy-array">compare effectiveness between python array and numpy array</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we want to find reciprocal of array element
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">reciprocal</span> <span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
        <span class="n">output</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">arr</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">output</span>


<span class="n">array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">500</span><span class="p">)</span>   
<span class="o">%</span><span class="n">timeit</span> <span class="n">reciprocal</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>


<span class="c1"># calculating same operation using numpy universal function
</span><span class="o">%</span><span class="n">timeit</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">array</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3.59 ms ± 121 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
7.41 µs ± 398 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre></div></div>

<h4 id="exploring-more-ufunc">Exploring more Ufunc</h4>
<ol>
  <li>arithmatic opeartion are of two type unary and binary</li>
  <li>unary opeartion like (-), ** exponent, % modulas</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x     ="</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x + 5 ="</span><span class="p">,</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x - 5 ="</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x * 2 ="</span><span class="p">,</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x / 2 ="</span><span class="p">,</span> <span class="n">x</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x // 2 ="</span><span class="p">,</span> <span class="n">x</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># floor division
</span>
<span class="k">print</span><span class="p">(</span><span class="s">"-x     = "</span><span class="p">,</span> <span class="o">-</span><span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x ** 2 = "</span><span class="p">,</span> <span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1">#power
</span><span class="k">print</span><span class="p">(</span><span class="s">"x % 2  = "</span><span class="p">,</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># reminder
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x     = [0 1 2 3]
x + 5 = [5 6 7 8]
x - 5 = [-5 -4 -3 -2]
x * 2 = [0 2 4 6]
x / 2 = [0.  0.5 1.  1.5]
x // 2 = [0 0 1 1]
-x     =  [ 0 -1 -2 -3]
x ** 2 =  [0 1 4 9]
x % 2  =  [0 1 0 1]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'y'</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"python absolute function abs"</span><span class="p">,</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'numpy absolute function absolute'</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">absolute</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y [-10  -9  -8  -7  -6]
python absolute function abs [10  9  8  7  6]
numpy absolute function absolute [10  9  8  7  6]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x     ="</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"e^x   ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"2^x   ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">exp2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"3^x   ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">power</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>


<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x        ="</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"ln(x)    ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"log2(x)  ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"log10(x) ="</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">log10</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x     = [1, 2, 3]
e^x   = [ 2.71828183  7.3890561  20.08553692]
2^x   = [2. 4. 8.]
3^x   = [ 3  9 27]
x        = [1, 2, 4, 10]
ln(x)    = [0.         0.69314718 1.38629436 2.30258509]
log2(x)  = [0.         1.         2.         3.32192809]
log10(x) = [0.         0.30103    0.60205999 1.        ]
</code></pre></div></div>

<h4 id="some-more-operation">some more operation</h4>
<blockquote>
  <p>calling reduce on the add ufunc returns the sum of all elements in the array:<br />
Specifying output</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">##### Specifying output
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>


<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">multiply</span><span class="p">.</span><span class="nb">reduce</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">multiply</span><span class="p">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[ 0. 10. 20. 30. 40.]
120
[  1   2   6  24 120]
</code></pre></div></div>

<h2 id="aggregation-in-numpy">Aggregation in Numpy</h2>
<ol>
  <li>sum() and np.sum() and np.nansum()</li>
  <li>remember np.sum() take cares of multidimensionality also . so never use python sum() with multidimensional array</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">big_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span>
<span class="o">%</span><span class="n">timeit</span> <span class="nb">sum</span><span class="p">(</span><span class="n">big_array</span><span class="p">)</span>
<span class="o">%</span><span class="n">timeit</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">big_array</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>264 ms ± 15 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
2.52 ms ± 198 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Function Name</th>
      <th>NaN-safe Version</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>np.sum</td>
      <td>np.nansum</td>
      <td>Compute sum of elements</td>
    </tr>
    <tr>
      <td>np.prod</td>
      <td>np.nanprod</td>
      <td>Compute product of elements</td>
    </tr>
    <tr>
      <td>np.mean</td>
      <td>np.nanmean</td>
      <td>Compute mean of elements</td>
    </tr>
    <tr>
      <td>p.std</td>
      <td>np.nanstd</td>
      <td>Compute standard deviation</td>
    </tr>
    <tr>
      <td>np.var</td>
      <td>np.nanvar</td>
      <td>Compute variance</td>
    </tr>
    <tr>
      <td>np.min</td>
      <td>np.nanmin</td>
      <td>Find minimum value</td>
    </tr>
    <tr>
      <td>np.max</td>
      <td>np.nanmax</td>
      <td>Find maximum value</td>
    </tr>
    <tr>
      <td>np.argmin</td>
      <td>np.nanargmin</td>
      <td>Find index of minimum value</td>
    </tr>
    <tr>
      <td>np.argmax</td>
      <td>np.nanargmax</td>
      <td>Find index of maximum value</td>
    </tr>
    <tr>
      <td>np.median</td>
      <td>np.nanmedian</td>
      <td>Compute median of elements</td>
    </tr>
    <tr>
      <td>np.percentile</td>
      <td>np.nanpercentile</td>
      <td>Compute rank-based statistics of elements</td>
    </tr>
    <tr>
      <td>np.any</td>
      <td>N/A</td>
      <td>Evaluate whether any elements are true</td>
    </tr>
    <tr>
      <td>np.all</td>
      <td>N/A</td>
      <td>Evaluate whether all elements are true</td>
    </tr>
  </tbody>
</table>

<h1 id="broadcasting">BroadCasting</h1>

<h4 id="rules-of-broadcasting">Rules of Broadcasting</h4>
<p>Broadcasting in NumPy follows a strict set of rules to determine the interaction between the two arrays:</p>

<ul>
  <li>Rule 1: If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side.</li>
  <li>Rule 2: If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape.</li>
  <li>Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an error is raised.</li>
</ul>

<p>M = np.ones((2, 3))<br />
a = np.arange(3)</p>
<ul>
  <li>Let’s consider an operation on these two arrays. The shape of the arrays are</li>
</ul>

<p>M.shape = (2, 3)<br />
a.shape = (3,)</p>
<ul>
  <li>We see by rule 1 that the array a has fewer dimensions, so we pad it on the left with ones:</li>
</ul>

<p>M.shape -&gt; (2, 3)<br />
a.shape -&gt; (1, 3)</p>
<ul>
  <li>By rule 2, we now see that the first dimension disagrees, so we stretch this dimension to match:</li>
</ul>

<p>M.shape -&gt; (2, 3)<br />
a.shape -&gt; (2, 3)</p>
<ul>
  <li>The shapes match, and we see that the final shape will be (2, 3):</li>
</ul>

<p>M = np.ones((3, 2))<br />
a = np.arange(3)</p>
<ul>
  <li>This is just a slightly different situation than in the first example: the matrix M is transposed. How does this affect the calculation? The shape of the arrays are</li>
</ul>

<p>M.shape = (3, 2)<br />
a.shape = (3,)</p>
<ul>
  <li>Again, rule 1 tells us that we must pad the shape of a with ones:</li>
</ul>

<p>M.shape -&gt; (3, 2)<br />
a.shape -&gt; (1, 3)</p>
<ul>
  <li>By rule 2, the first dimension of a is stretched to match that of M:</li>
</ul>

<p>M.shape -&gt; (3, 2)<br />
a.shape -&gt; (3, 3)</p>
<ul>
  <li>Now we hit rule 3–the final shapes do not match, so these two arrays are incompatible, as we can observe by attempting this operation:</li>
</ul>

<h4 id="practice-of-broadcasting">Practice of broadcasting</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Lets say we have 10 sample which measure three hight of three flower, so we need an array of 10 rows and 3 column
</span>
<span class="c1">#x = np.random.randint(1,50,size=30).reshape(10,3)
</span><span class="n">x</span><span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="c1">#print(x)
</span>
<span class="c1"># to know the mean hight of each flower
</span><span class="n">y</span><span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">empty</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">axis</span> <span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">out</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># axis zero mean row wise sum
</span><span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>

<span class="c1"># to verify if mean is correct, we all know sum of( mean-point ) is always 0 when all point are between 0,1
</span>
<span class="n">xcentered</span><span class="o">=</span> <span class="n">x</span><span class="o">-</span><span class="n">y</span>
<span class="k">print</span><span class="p">(</span><span class="n">xcentered</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0.4368809  0.58307355 0.53017212]
[ 0.00000000e+00 -4.44089210e-17  2.22044605e-17]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET